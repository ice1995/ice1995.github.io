<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>crypt-1</title>
      <link href="/2018/09/18/crypt-1/"/>
      <url>/2018/09/18/crypt-1/</url>
      <content type="html"><![CDATA[<p>保密学 = 密码学 + 密码分析学</p>]]></content>
      
      <categories>
          
          <category> cryptology </category>
          
      </categories>
      
      
        <tags>
            
            <tag> password </tag>
            
            <tag> cryption </tag>
            
            <tag> cryptology </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>数据结构 - 树</title>
      <link href="/2018/09/17/algorithm-tree/"/>
      <url>/2018/09/17/algorithm-tree/</url>
      <content type="html"><![CDATA[<h4 id="树"><a href="#树" class="headerlink" title="树"></a>树</h4><p>&emsp;&emsp; 一棵树是一些节点的集合。如果这棵树非空，则一棵树由称作根（root）节点的r以及0个或者多个非空的(子)树组成，这些子树中每一棵的根都被来自根r的一条有向的边（edge）所连接。<br>&emsp;&emsp;每一棵子树的根叫做r的儿子，r是每一棵子树的根的父亲。没有儿子的节点称为树叶，具有相同父节点的节点称为兄弟。</p>]]></content>
      
      <categories>
          
          <category> algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> algorithm </tag>
            
            <tag> data structure </tag>
            
            <tag> tree </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>PyQt学习记录（一） -- 初识PyQt</title>
      <link href="/2018/09/11/pyqt-1/"/>
      <url>/2018/09/11/pyqt-1/</url>
      <content type="html"><![CDATA[<h4 id="PyQt介绍"><a href="#PyQt介绍" class="headerlink" title="PyQt介绍"></a>PyQt介绍</h4><p>&emsp;&emsp;PyQt5是一套Python绑定Digia QT5应用的框架。它可用于Python 2和3。本教程使用Python 3。Qt库是最强大的GUI库之一。PyQt5的官方网站<a href="http://www.riverbankcomputing.co.uk/news。" target="_blank" rel="noopener">http://www.riverbankcomputing.co.uk/news。</a><br>&emsp;&emsp;PyQt5做为Python的一个模块，它有620多个类和6000个函数和方法。这是一个跨平台的工具包，它可以运行在所有主要的操作系统，包括UNIX，Windows，Mac OS。PyQt5是双重许可。开发者可以在GPL和商业许可之间进行选择。、</p><h4 id="PyQt模块"><a href="#PyQt模块" class="headerlink" title="PyQt模块"></a>PyQt模块</h4><ul><li>QtCore:包含了核心的非GUI功能。此模块用于处理时间、文件和目录、各种数据类型、流、URL、MIME类型、线程或进程。</li><li>QtGui包含类窗口系统集成、事件处理、二维图形、基本成像、字体和文本。</li><li>qtwidgets模块包含创造经典桌面风格的用户界面提供了一套UI元素的类。</li><li>QtMultimedia包含的类来处理多媒体内容和API来访问相机和收音机的功能。</li><li>Qtbluetooth模块包含类的扫描设备和连接并与他们互动。描述模块包含了网络编程的类。这些类便于TCP和IP和UDP客户端和服务器的编码，使网络编程更容易和更便携。</li><li>Qtpositioning包含类的利用各种可能的来源，确定位置，包括卫星、Wi-Fi、或一个文本文件。</li><li>Enginio模块实现了客户端库访问Qt云服务托管的应用程序运行时。</li><li>Qtwebsockets模块包含实现WebSocket协议类。</li><li>QtWebKit包含一个基于Webkit2图书馆Web浏览器实现类。</li><li>Qtwebkitwidgets包含的类的基础webkit1一用于qtwidgets应用Web浏览器的实现。</li><li>QtXml包含与XML文件的类。这个模块为SAX和DOM API提供了实现。</li><li>QtSvg模块提供了显示SVG文件内容的类。可伸缩矢量图形（SVG）是一种描述二维图形和图形应用的语言。</li><li>QtSql模块提供操作数据库的类。</li><li>QtTest包含的功能，使PyQt5应用程序的单元测试</li></ul><h4 id="PyQt5尝试"><a href="#PyQt5尝试" class="headerlink" title="PyQt5尝试"></a>PyQt5尝试</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"> </span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">PyQt5 学习</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"> </span><br><span class="line"><span class="comment">#这里我们提供必要的引用。基本控件位于PyQt5.qtwidgets模块中。</span></span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QApplication, QWidget</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment">#每一PyQt5应用程序必须创建一个应用程序对象。sys.argv参数是一个列表，从命令行输入参数。</span></span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    <span class="comment">#QWidget部件是PyQt5所有用户界面对象的基类。他为QWidget提供默认构造函数。默认构造函数没有父类。</span></span><br><span class="line">    w = QWidget()</span><br><span class="line">    <span class="comment">#resize()方法调整窗口的大小。这离是250px宽150px高</span></span><br><span class="line">    w.resize(<span class="number">250</span>, <span class="number">150</span>)</span><br><span class="line">    <span class="comment">#move()方法移动窗口在屏幕上的位置到x = 300，y = 300坐标。</span></span><br><span class="line">    w.move(<span class="number">300</span>, <span class="number">300</span>)</span><br><span class="line">    <span class="comment">#设置窗口的标题</span></span><br><span class="line">    w.setWindowTitle(<span class="string">'Simple'</span>)</span><br><span class="line">    <span class="comment">#显示在屏幕上</span></span><br><span class="line">    w.show()</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#系统exit()方法确保应用程序干净的退出</span></span><br><span class="line">    <span class="comment">#的exec_()方法有下划线。因为执行是一个Python关键词。因此，exec_()代替</span></span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><p>效果如图：<br><img src="http://zhangbohan.xyz/images/PyQt/PyQt-1.png" alt="PyQt-1.png"></p><h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><p><a href="https://maicss.gitbooks.io/PyQt5/content/" target="_blank" rel="noopener">https://maicss.gitbooks.io/PyQt5/content/</a><br>Python Qt GUI 快速编程  —- PyQt编程指南（Mark Summerfield 著 ）</p>]]></content>
      
      <categories>
          
          <category> PyQt </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> GUI </tag>
            
            <tag> PyQt </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>PyQT学习记录（二）</title>
      <link href="/2018/09/11/pyqt-2/"/>
      <url>/2018/09/11/pyqt-2/</url>
      <content type="html"><![CDATA[<h4 id="PyQt5-程序基础解析"><a href="#PyQt5-程序基础解析" class="headerlink" title="PyQt5 程序基础解析"></a>PyQt5 程序基础解析</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> time </span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> *</span><br></pre></td></tr></table></figure><ol><li>导入sys模块，为了访问在sys.argv列cd cd 表中的那些命令行参数  </li><li>导入time模块，使用time.sleep()  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app = QApplication(sys.argv)</span><br></pre></td></tr></table></figure></li></ol><p>&emsp;&emsp;每个PyQt GUI程序都必须有一个QApplication对象。这个对象会提供访问全局信息的能力，包括程序的目录、屏幕大小、程序运行在哪个屏幕上（对于多线程系统来说）。这个对象还还会提供后续会说到的事件循环。<br>&emsp;&emsp;PyQt可以是是被一些自己的参数的，如 - geometry 和 - style 等，这些参数在QApplication的初始化文档中。</p><p>&emsp;&emsp;调用app.exec_()会开始执行QApplication对象的事件循环，第一个事件就是绘制事件，调用QApplication.quit()方法会干净的结束该GUI程序，关闭所有已经打开的窗口，释放所占用的资源，然后退出程序。<br>&emsp;&emsp;事件循环用伪代码展示就是这个样子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">while True:</span><br><span class="line">    event = getNextEvent()</span><br><span class="line">    if event:</span><br><span class="line">        if event == Terminates:</span><br><span class="line">            break</span><br><span class="line">        processEvent(Event)</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;当用户与应用程序交互的时候，或是发生特定事情时，会在PyQt内部产生一个事件并将其添加到事件列表中去。</p><h4 id="PyQt5布局"><a href="#PyQt5布局" class="headerlink" title="PyQt5布局"></a>PyQt5布局</h4><h5 id="1-绝对定位"><a href="#1-绝对定位" class="headerlink" title="1. 绝对定位"></a>1. 绝对定位</h5><p>&emsp;&emsp;程序指定每个控件的位置和大小(以像素为单位)。<br>绝对定位有以下限制:<br>&emsp;- 如果我们调整窗口，控件的大小和位置不会改变<br>&emsp;- 在各种平台上应用程序看起来会不一样<br>&emsp;- 如果改变字体，我们的应用程序的布局就会改变<br>&emsp;- 如果我们决定改变我们的布局,我们必须完全重做我们的布局  </p><h5 id="2-盒布局-Boxlayout"><a href="#2-盒布局-Boxlayout" class="headerlink" title="2. 盒布局 Boxlayout"></a>2. 盒布局 Boxlayout</h5><p>&emsp;&emsp;我们使用QHBoxLayout和QVBoxLayout，来分别创建横向布局和纵向布局<br>&emsp;&emsp;如果我们需要把两个按钮放在程序的右下角，创建这样的布局，我们只需要一个水平布局加一个垂直布局的盒子就可以了。再用弹性布局增加一点间隙。  </p><h5 id="3-格栅布局"><a href="#3-格栅布局" class="headerlink" title="3. 格栅布局"></a>3. 格栅布局</h5><p>&emsp;&emsp;最常用的还是栅格布局了。这种布局是把窗口分为行和列。创建和使用栅格布局，需要使用QGridLayout模块。  </p><h4 id="做了一个小型的demo"><a href="#做了一个小型的demo" class="headerlink" title="做了一个小型的demo"></a>做了一个小型的demo</h4><p>关于pyqt的更多知识，有空余时间的时候会继续补充。<br>项目地址： <a href="https://github.com/ice1995/ncmdump" target="_blank" rel="noopener">ncmdump</a><br>项目介绍： 原作者写出了ncm转换为MP3的基础版本，用这不是很方便，就用正在学习的pyrt做了一个初版的demo图形化界面，后续有时间继续优化  </p>]]></content>
      
      <categories>
          
          <category> PyQT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> PyQT </tag>
            
            <tag> GUI </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>mood-record</title>
      <link href="/2018/09/08/mood-record/"/>
      <url>/2018/09/08/mood-record/</url>
      <content type="html"><![CDATA[<h5 id="2018年9月8日"><a href="#2018年9月8日" class="headerlink" title="2018年9月8日"></a>2018年9月8日</h5><p>happy：<br>&emsp;&emsp;1. lenovo air 12 维修还在保修期内，可以换键盘 ,联想 3c服务中心服务态度很赞<br>middle:<br>&emsp;&emsp;1. 下周找辉哥要回发票，当报销用<br>sad：<br>&emsp;&emsp;1. 得知8月1号到5号因为未录考勤，加班18小时白干…没有加班费   啊………..近600啊  </p><h5 id="2018年9月10日"><a href="#2018年9月10日" class="headerlink" title="2018年9月10日"></a>2018年9月10日</h5><p>happy:<br>&emsp;&emsp;1. 开森，抢到10月7号回北京的票<br>sad:<br>&emsp;&emsp;1. 公安网备审核不通过    </p>]]></content>
      
      <categories>
          
          <category> mood </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mood </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>nginx的使用（二）-- 详细了解Nginx</title>
      <link href="/2018/09/01/nginx-2/"/>
      <url>/2018/09/01/nginx-2/</url>
      <content type="html"><![CDATA[<h4 id="为什么使用Nginx"><a href="#为什么使用Nginx" class="headerlink" title="为什么使用Nginx"></a>为什么使用Nginx</h4><ol><li>更快<br>&emsp;&emsp;主要表现在两个方面：1，正常情况下，单次请求会得到更快的响应；2，在高峰期（数以万计的并发请求），Nginx可以比其他web服务器更快地请求响应。</li><li>高扩展性<br>&emsp;&emsp;它完全是由多个不同功能、 不同层次、 不同类型且耦合度低的模块组成。</li><li>高可靠性<br> &emsp;&emsp;Nginx 的高可靠性来自于其核心框架代码的优秀设计、 模块设计的简单性。每个 worker进程相对独立， master 进程在 1 个 worker 进程出错时可以快速“拉起”新的 worker 子进程提供服务。</li><li>低内存消耗<br> &emsp;&emsp;一般情况下， 10 000 个非活跃的 HTTP Keep-Alive 连接在 Nginx 中仅消耗 2.5MB 的内存， 这是 Nginx 支持高并发连接的基础。</li><li>单机支持 10 万以上的并发连接   </li><li>热部署<br> &emsp;&emsp;可以在 7×24 小时不间断服务的前提下， 升级 Nginx 的可执行文件。 当然， 它也支持不停止服务就更新配置项、 更换日志文件等功能。</li><li>最自由的BSD许可协议<br> &emsp;&emsp;允许用户在自己的项目中直接使用或修改 Nginx 源码。</li></ol><h4 id="使用Nginx的必备软件"><a href="#使用Nginx的必备软件" class="headerlink" title="使用Nginx的必备软件"></a>使用Nginx的必备软件</h4><ol><li>GCC编译器<br>&emsp;&emsp;用来编译nginx的各个模块  </li><li>PCRE库<br>&emsp;&emsp;PCRE（Perl Compatible Regular Expressions， Perl 兼容正则表达式） 是由 Philip Hazel开发的函数库， 目前为很多软件所使用， 该库支持正则表达式。当然，如果不打算在nginx中使用正则表达式，那么这个就不是必需的。</li><li>zlib库<br> &emsp;&emsp;zlib 库用于对 HTTP 包的内容做 gzip 格式的压缩， 如果我们在 nginx.conf 里配置了 gzip on， 并指定对于某些类型（content-type） 的 HTTP 响应使用 gzip 来进行压缩以减少网络传， 那么， 在编译时就必须把 zlib 编译进 Nginx。</li><li>OpenSSL 开发库<br>&emsp;&emsp;在SSL 协议上传输 HTTP，以及使用MD5、 SHA1 等散列函数都需要OpenSSL 开发库的支持。<h4 id="运行中的Nginx进程间的关系"><a href="#运行中的Nginx进程间的关系" class="headerlink" title="运行中的Nginx进程间的关系"></a>运行中的Nginx进程间的关系</h4><center><br><img src="http://zhangbohan.xyz/images/nginx/nginx-1.png"><br></center><br>&emsp;&emsp;部署 Nginx 时都是使用一个 master 进程来管理多个worker 进程， 一般情况下， worker 进程的数量与服务器上的 CPU 核心数相等。</li></ol><h4 id="Nginx文件路径的常用定义"><a href="#Nginx文件路径的常用定义" class="headerlink" title="Nginx文件路径的常用定义"></a>Nginx文件路径的常用定义</h4><ol><li><p>以 root 方式设置资源路径<br>语法： root path;<br>默认： root html;<br>配置块： http、 server、 location、 if<br>&emsp;&emsp;例如， 定义资源文件相对于 HTTP 请求的根目录。</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">location /download/ &#123;</span><br><span class="line">    root /opt/web/html/;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> &emsp;&emsp;在上面的配置中， 如果有一个请求的 URI 是 /download/index/test.html， 那么 Web 服务器将会返回服务器上 /opt/web/html/download/index/test.html 文件的内容。 </p></li><li><p>以 alias 方式设置资源路径<br>语法： alias path;<br>配置块： location<br>&emsp;&emsp;alias 也是用来设置文件资源路径的， 它与 root 的不同点主要在于如何解读紧跟 location后面的 uri 参数， 这将会致使 alias 与 root 以不同的方式将用户请求映射到真正的磁盘文件上。 例如， 如果有一个请求的 URI 是 /conf/nginx.conf， 而用户实际想访问的文件在 /usr/local/nginx/conf/nginx.conf， 那么想要使用 alias 来进行设置的话， 可以采用如下方式：</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">location /conf &#123;</span><br><span class="line">alias /usr/local/nginx/conf/;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 如果用 root 设置， 那么语句如下所示：</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">location /conf &#123;</span><br><span class="line">root /usr/local/nginx/;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> alias 后面还可以添加正则表达式， 例如：</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">location ~ ^/test/(\w+)\.(\w+)$ &#123;</span><br><span class="line">alias /usr/local/nginx/$2/$1.$2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> &emsp;&emsp;这样， 请求在访问 /test/nginx.conf 时， Nginx 会返回 /usr/local/nginx/conf/nginx.conf 文件中的内容。</p></li><li>访问首页<br>语法： index file …;<br>默认： index index.html;<br>配置块： http、 server、 location<br>&emsp;&emsp;有时， 访问站点时的 URI 是 /， 这时一般是返回网站的首页， 而这与 root 和 alias 都不同。 这里用 ngx_http_index_module 模块提供的 index 配置实现。 index 后可以跟多个文件参数， Nginx 将会按照顺序来访问这些文件， 例如：   <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">root path;</span><br><span class="line">index /index.html /html/index.php /index.php;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>mycat使用记录一 -- 安装与配置</title>
      <link href="/2018/08/30/mycat-1/"/>
      <url>/2018/08/30/mycat-1/</url>
      <content type="html"><![CDATA[<p>rkdownm</p><h4 id="背景条件"><a href="#背景条件" class="headerlink" title="背景条件"></a>背景条件</h4><p>&emsp;&emsp;现有app流量数据统计分析系统，因数据量过大使用单数据库性能有限，打算将现有数据库进行优化，计划使用mycat实现分布式，在本地搭建环境学习</p><h4 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h4><p>&emsp;&emsp;VMware虚拟机下的Cetnos7 × 3台</p><h4 id="mycat的安装"><a href="#mycat的安装" class="headerlink" title="mycat的安装"></a>mycat的安装</h4><ol><li><a href="http://dl.mycat.io" target="_blank" rel="noopener">下载</a>mycat，这里我选择的是1.6.5版本，也就是目前的release版本。</li><li>上传至linux系统，解压至/opt/mycat(我习惯的目录)</li></ol><h4 id="mycat的配置"><a href="#mycat的配置" class="headerlink" title="mycat的配置"></a>mycat的配置</h4><h5 id="配置文件路径"><a href="#配置文件路径" class="headerlink" title="配置文件路径"></a>配置文件路径</h5><p>\$mycat_home\$指的是安装目录<br>\$mycat_home\$/conf/server.xml    Mycat的配置文件，设置账号、参数等<br>\$mycat_home\$/conf/schema.xml  Mycat对应的物理数据库和数据库表的配置<br>\$mycat_home\$/conf/rule.xml    Mycat分片（分库分表）规则  </p><h5 id="具体配置"><a href="#具体配置" class="headerlink" title="具体配置"></a>具体配置</h5><ol><li><p>wrapper.conf<br>–配置jdk(如果已经配置java环境变量，这一步可以忽略)</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wrapper.java.command=/usr/bin/java</span><br><span class="line">#配置java的路径</span><br></pre></td></tr></table></figure></li><li><p>server.xml</p><ol><li><p>user标签</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">user</span> <span class="attr">name</span>=<span class="string">"root"</span> <span class="attr">defaultAccount</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span>&gt;</span>your_password<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"schemas"</span>&gt;</span>db1,db2<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"readOnly"</span>&gt;</span>false<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br></pre></td></tr></table></figure><p>user    用户配置节点<br>–name    登录的用户名，也就是连接Mycat的用户名<br>–password    登录的密码，也就是连接Mycat的密码<br>–schemas    数据库名，这里会和schema.xml中的配置关联，多个用逗号分开，例如需要这个用户需要管理两个数据库db1,db2，则配置db1,dbs  </p></li><li><p>privileges标签</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">privileges</span> <span class="attr">check</span>=<span class="string">"false"</span>&gt;</span> 默认关闭</span><br><span class="line">    <span class="tag">&lt;<span class="name">schema</span> <span class="attr">name</span>=<span class="string">"TESTDB"</span> <span class="attr">dml</span>=<span class="string">"0110"</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">"tb 01"</span> <span class="attr">dml</span>=<span class="string">"0000"</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">"tb02"</span> <span class="attr">dml</span>=<span class="string">"1111"</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">        1 代表有权限</span><br><span class="line">        0 代表无权限</span><br><span class="line">    顺序为  insert,update,select,delete</span><br><span class="line">    <span class="tag">&lt;/<span class="name">schema</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">privileges</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>system标签<br>&emsp;&emsp;这个标签内嵌套的所有 property 标签都与系统配置有关。  </p></li><li>firewall标签<br>&emsp;&emsp;有关防火墙的标签，也就是在网络层对请求的地址进行限制，主要是从安全角度来保证Mycat不被匿名IP进行访问  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">&lt;!-- 全局SQL防火墙设置 --&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--白名单可以使用通配符%或着*--&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--例如&lt;host host="127.0.0.*" user="root"/&gt;--&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--例如&lt;host host="127.0.*" user="root"/&gt;--&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--例如&lt;host host="127.*" user="root"/&gt;--&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--例如&lt;host host="1*7.*" user="root"/&gt;--&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--这些配置情况下对于127.0.0.1都能以root账户登录--&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment"> &lt;firewall&gt;</span></span><br><span class="line"><span class="comment">    &lt;whitehost&gt;</span></span><br><span class="line"><span class="comment">       &lt;host host="1*7.0.0.*" user="root"/&gt;</span></span><br><span class="line"><span class="comment">    &lt;/whitehost&gt;</span></span><br><span class="line"><span class="comment">    &lt;blacklist check="false"&gt;</span></span><br><span class="line"><span class="comment">    &lt;/blacklist&gt;</span></span><br><span class="line"><span class="comment">&lt;/firewall&gt;</span></span><br></pre></td></tr></table></figure></li></ol></li><li><p>schema.xml<br>– schema      数据库设置，此数据库为逻辑数据库，name与server.xml中schema对应<br>– dataNode    分片信息，也就是分库相关配置<br>– dataHost    物理数据库，真正存储数据的数据库  </p><ol><li><p>schema标签<br>&emsp;&emsp;schema标签用来定义mycat实例中的逻辑库，mycat可以有多个逻辑库，每个逻辑库都有自己的相关配置。可以使用schema标签来划分这些不同的逻辑库<br>&emsp;&emsp;如果不配置schema标签，所有表的配置会属于同一个默认的逻辑库。逻辑库的概念和MySql的database的概念一样，我们在查询两个不同逻辑库中的表的时候，需要切换到该逻辑库下进行查询。</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">schema</span> <span class="attr">name</span>=<span class="string">" "</span> <span class="attr">checkSQLschema</span>=<span class="string">"false"</span> <span class="attr">sqlMaxLimit</span>=<span class="string">"100"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">schema</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">name        逻辑数据库名,与server.xml中的schema对应</span></span><br><span class="line"><span class="comment">checkSQLschema     数据库前缀相关设置，当该值为true时，例如我们执行语句select * from TESTDB.company 。mycat会把语句修改为 select * from company 去掉TESTDB。</span></span><br><span class="line"><span class="comment">sqlMaxLimit        当该值设置为某个数值时，每条执行的sql语句，如果没有加上limit语句，Mycat会自动加上对应的值。不写的话，默认返回所有的值。</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>table标签<br>–name  表名，物理数据库中表名<br>–dataNode  表存储到哪些节点，多个节点用逗号分隔。节点为下文dataNode设置的name<br>–primaryKey主键字段名，自动生成主键时需要设置<br>–autoIncrement 是否自增<br>–rule  分片规则名，具体规则下文rule详细介绍<br>–type 该属性定义了逻辑表的类型，目前逻辑表只有全局表和普通表。全局表： global 普通表：无<br>&emsp;&emsp;注：全局表查询任意节点，普通表查询所有节点效率低<br>–autoIncrement mysql对非自增长主键，使用last_insert_id() 是不会返回结果的，只会返回0。所以，只有定义了自增长主键的表，才可以用last_insert_id()返回主键值。<br>mycat提供了自增长主键功能，但是对应的mysql节点上数据表，没有auto_increment,那么在mycat层调用last_insert_id()也是不会返回结果的。<br>–needAddLimit 指定表是否需要自动的在每个语句后面加上limit限制，由于使用了分库分表，数据量有时候会特别庞大，这时候执行查询语句，忘记加上limt就会等好久，所以mycat自动为我们加上了limit 100，这个属性默认为true，可以自己设置为false禁用。如果使用这个功能，最好配合使用数据库模式的全局序列。<br>–subTables 分表，分表目前不支持Join。</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">“test”</span> <span class="attr">primaryKey</span>=<span class="string">"ID"</span> <span class="attr">autoIncrement</span>=<span class="string">"true"</span> <span class="attr">dataNode</span>=<span class="string">“dn1,dn2,dn3”</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">“mine”</span> <span class="attr">primaryKey</span>=<span class="string">"ID"</span> <span class="attr">autoIncrement</span>=<span class="string">"true"</span> <span class="attr">dataNode</span>=<span class="string">“dn1,dn2,dn3”</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">“new”</span> <span class="attr">primaryKey</span>=<span class="string">"ID"</span> <span class="attr">autoIncrement</span>=<span class="string">"true"</span> <span class="attr">dataNode</span>=<span class="string">“dn1,dn2,dn3”</span> /&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>childTable标签<br>–childTable 标签用于定义 E-R 分片的子表。通过标签上的属性与父表进行关联。<br>–name    子表的名称<br>–joinKey    子表中字段的名称<br>–parentKey    父表中字段名称<br>–primaryKey    同Table<br>–needAddLimit    同Table </p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">"customer"</span> <span class="attr">primaryKey</span>=<span class="string">"ID"</span> <span class="attr">dataNode</span>=<span class="string">"dn1,dn2"</span> <span class="attr">rule</span>=<span class="string">"sharding-by-intfile"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">childTable</span> <span class="attr">name</span>=<span class="string">"c_a"</span> <span class="attr">primaryKey</span>=<span class="string">"ID"</span> <span class="attr">joinKey</span>=<span class="string">"customer_id"</span> <span class="attr">parentKey</span>=<span class="string">"id"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>dataNode标签<br>&emsp;&emsp;datanode标签定义了mycat中的数据节点，也就是我们所说的数据分片。一个datanode标签就是一个独立的数据分片。<br>&emsp;&emsp;例子中的表述的意思为，使用名字为localhost1数据库实例上的db1物理数据库，这就组成一个数据分片，最后我们用dn1来标示这个分片。<br>–name    定义数据节点的名字，这个名字需要唯一。我们在table标签上用这个名字来建立表与分片对应的关系<br>–dataHost    用于定义该分片属于哪个数据库实例，属性与datahost标签上定义的name对应<br>–database    用于定义该分片属于数据库实例上 的具体库。  </p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dataNode</span> <span class="attr">name</span>=<span class="string">"dn1"</span> <span class="attr">dataHost</span>=<span class="string">"localhost1"</span> <span class="attr">database</span>=<span class="string">"db1"</span> /&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>dataHost标签<br>–name    唯一标示dataHost标签，供上层使用<br>–maxCon    指定每个读写实例连接池的最大连接。<br>–minCon    指定每个读写实例连接池的最小连接，初始化连接池的大小<br>–balance    负载均称类型<br>&emsp;&emsp;balance=”0”：不开启读写分离机制，所有读操作都发送到当前可用的writeHost上<br>&emsp;&emsp;balance=”1”：全部的readHost与stand by writeHost参与select语句的负载均衡，简单的说，当双主双从模式（M1-S1，M2-S2 并且M1 M2互为主备），正常情况下，M2,S1,S2都参与select语句的负载均衡。<br>&emsp;&emsp;balance=”2”：所有读操作都随机的在writeHost、readHost上分发<br>&emsp;&emsp;balance=”3”：所有读请求随机的分发到writeHst对应的readHost执行，writeHost不负担读写压力。（1.4之后版本有）<br>–writeType    负载均衡类型。<br>&emsp;&emsp;writeType=”0”, 所有写操作发送到配置的第一个 writeHost，第一个挂了切到还生存的第二个writeHost，重新启动后已切换后的为准，切换记录在配置文件中:dnindex.properties .<br>&emsp;&emsp;writeType=”1”，所有写操作都随机的发送到配置的 writeHost。1.5以后版本废弃不推荐。<br>–switchType<br>&emsp;&emsp;-1 不自动切换<br>&emsp;&emsp;1 默认值 自动切换<br>&emsp;&emsp;2 基于MySql主从同步的状态决定是否切换，心跳语句为 show slave status<br>&emsp;&emsp;3 基于 MySQL galary cluster 的切换机制（适合集群）（1.4.1）,心跳语句为 show status like ‘wsrep%’<br>–dbType 指定后端链接的数据库类型目前支持二进制的mysql协议，还有其他使用jdbc链接的数据库，例如：mongodb，oracle，spark等<br>–dbDriver    指定连接后段数据库使用的driver，目前可选的值有native和JDBC。使用native的话，因为这个值执行的是二进制的mysql协议，所以可以使用mysql和mariadb，其他类型的则需要使用JDBC驱动来支持。<br>1.6版本开始支持postgresql的原始协议。<br>如果使用JDBC的话需要符合JDBC4标准的驱动jar 放到mycat\lib目录下，并检查驱动jar包中包括如下目录结构文件 META-INF\services\java.sql.Driver。 在这个文件写上具体的driver类名，例如com.mysql.jdbc.Driver<br>–tempReadHostAvailable<br>&emsp;&emsp;如果配置了这个属性 writeHost 下面的 readHost 仍旧可用，默认 0 可配置（0、1）。</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dataHost</span> <span class="attr">name</span>=<span class="string">"localhost1"</span> <span class="attr">maxCon</span>=<span class="string">"1000"</span> <span class="attr">minCon</span>=<span class="string">"10"</span> <span class="attr">balance</span>=<span class="string">"0"</span> <span class="attr">writeType</span>=<span class="string">"0"</span> <span class="attr">dbType</span>=<span class="string">"mysql"</span> <span class="attr">dbDriver</span>=<span class="string">"native"</span> <span class="attr">switchType</span>=<span class="string">"1"</span> <span class="attr">slaveThreshold</span>=<span class="string">"100"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">heartbeat</span>&gt;</span>select user()<span class="tag">&lt;/<span class="name">heartbeat</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">writeHost</span> <span class="attr">host</span>=<span class="string">"hostM1"</span> <span class="attr">url</span>=<span class="string">"192.168.1.100:3306"</span> <span class="attr">user</span>=<span class="string">"root"</span> <span class="attr">password</span>=<span class="string">"123456"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">readHost</span> <span class="attr">host</span>=<span class="string">"hostS1"</span> <span class="attr">url</span>=<span class="string">"192.168.1.101:3306"</span> <span class="attr">user</span>=<span class="string">"root"</span> <span class="attr">password</span>=<span class="string">"123456"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">writeHost</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dataHost</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>heartbeat标签<br>&emsp;&emsp;这个标签内指明用于和后端数据库进行心跳检查的语句。例如：MYSQL 可以使用 select user()，Oracle 可以使用 select 1 from dual 等。<br>&emsp;&emsp;这个标签还有一个 connectionInitSql 属性，主要是当使用 Oracla 数据库时，需要执行的初始化 SQL 语句就放到这里面来。例如：alter session set nls_date_format=’yyyy-mm-dd hh24:mi:ss ‘<br>1.4 主从切换的语句必须是：show slave status  </p></li><li><p>writeHost /readHost 标签<br>&emsp;&emsp;这两个标签都指定后端数据库的相关配置，用于实例化后端连接池。唯一不同的是，writeHost 指定写实例、readHost 指定读实例。<br>&emsp;&emsp;在一个 dataHost 内可以定义多个 writeHost 和 readHost。但是，如果 writeHost 指定的后端数据库宕机，那么这个 writeHost 绑定的所有 readHost 都将不可用。<br>&emsp;&emsp;另一方面，由于这个 writeHost 宕机，系统会自动的检测到，并切换到备用的 writeHost 上去。这两个标签的属性相同，这里就一起介绍。<br>–host    用于标识不同实例，一般 writeHost 我们使用<em>M</em>1，readHost我们用<em>S</em>1。<br>–url    后端实例连接地址。Native：地址：端口 JDBC：jdbc的url<br>–password    后端存储实例需要的密码<br>–user    后端存储实例需要的用户名字<br>–weight    权重 配置在 readhost 中作为读节点的权重<br>–usingDecrypt    是否对密码加密，默认0。具体加密方法看官方文档。  </p></li></ol></li></ol>]]></content>
      
      <categories>
          
          <category> middleware </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> mycat </tag>
            
            <tag> db </tag>
            
            <tag> middleware </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Linux指令记录合集（长期更新）</title>
      <link href="/2018/08/30/linux-command/"/>
      <url>/2018/08/30/linux-command/</url>
      <content type="html"><![CDATA[<p>此命令合集适合于Centos <font color="#40B245">7</font></p><h4 id="systemctl"><a href="#systemctl" class="headerlink" title="systemctl"></a>systemctl</h4><h6 id="服务相关指令"><a href="#服务相关指令" class="headerlink" title="服务相关指令"></a>服务相关指令</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">systemctl start service-name        <span class="comment">#启动某服务</span></span><br><span class="line">systemctl stop service-name         <span class="comment">#停止某服务</span></span><br><span class="line">systemctl restart service-name      <span class="comment">#重启某服务</span></span><br><span class="line">systemctl <span class="built_in">enable</span> service-name       <span class="comment">#设置开机自动启动某服务</span></span><br><span class="line">systemctl <span class="built_in">disable</span> service-name      <span class="comment">#设置开机停止自动启动某服务</span></span><br><span class="line">systemctl list-units --<span class="built_in">type</span>=service <span class="comment">#查看所有已启动的服务</span></span><br><span class="line">systemctl list-unit-files           <span class="comment">#查看已经安装的所有服务</span></span><br></pre></td></tr></table></figure><h6 id="添加程序到服务"><a href="#添加程序到服务" class="headerlink" title="添加程序到服务"></a>添加程序到服务</h6><p>systemctl脚本存放在:/usr/lib/systemd/<br>&emsp;&emsp;[Unit]部分主要是对这个服务的说明，内容包括Description和After，Description 用于描述服务，After用于描述服务类别<br>&emsp;&emsp;[Service]部分是服务的关键，是服务的一些具体运行参数的设置.<br>&emsp;&emsp;Type=forking是后台运行的形式，<br>&emsp;&emsp;User=users是设置服务运行的用户,<br>&emsp;&emsp;Group=users是设置服务运行的用户组,<br>&emsp;&emsp;PIDFile为存放PID的文件路径，<br>&emsp;&emsp;ExecStart为服务的具体运行命令,<br>&emsp;&emsp;ExecReload为重启命令，<br>&emsp;&emsp;ExecStop为停止命令，<br>&emsp;&emsp;PrivateTmp=True表示给服务分配独立的临时空间<br>    注意：[Service]部分的启动、重启、停止命令全部要求使用绝对路径，使用相对路径则会报错！<br>    [Install]部分是服务安装的相关设置，可设置为多用户的  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#以tomcat为例</span></span><br><span class="line"><span class="comment">#vim /usr/lib/systemd/system/tomcat.service</span></span><br><span class="line"> </span><br><span class="line">[Unit]</span><br><span class="line">Description=java tomcat project</span><br><span class="line">After=tomcat.service</span><br><span class="line">  </span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">User=users</span><br><span class="line">Group=users</span><br><span class="line">PIDFile=/usr/<span class="built_in">local</span>/tomcat/tomcat.pid</span><br><span class="line">ExecStart=/usr/<span class="built_in">local</span>/tomcat/bin/startup.sh</span><br><span class="line">ExecReload=</span><br><span class="line">ExecStop=/usr/<span class="built_in">local</span>/tomcat/bin/shutdown.sh</span><br><span class="line">PrivateTmp=<span class="literal">true</span></span><br><span class="line">  </span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><h4 id="firewall-cmd"><a href="#firewall-cmd" class="headerlink" title="firewall-cmd"></a>firewall-cmd</h4><p>防火墙相关<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --add-port=port-number/protocols --zone=zone-name --permanent <span class="comment">#在zone-name区域永久开启protocol协议的port-number端口</span></span><br><span class="line">firewall-cmd --zone=public --list-all   <span class="comment"># 显示所有公共区域（public）</span></span><br></pre></td></tr></table></figure></p><h4 id="ln"><a href="#ln" class="headerlink" title="ln"></a>ln</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s <span class="built_in">source</span> link  <span class="comment">#创建一个指向source的link（快捷方式）</span></span><br></pre></td></tr></table></figure><h4 id="后台运行命令"><a href="#后台运行命令" class="headerlink" title="后台运行命令"></a>后台运行命令</h4><ol><li><p>&amp;<br>&emsp;&emsp;当在前台运行某个作业时，终端被该作业占据；可以在命令后面加上&amp; 实现后台运行。例如：sh test.sh &amp; 适合在后台运行的命令有f i n d、费时的排序及一些s h e l l脚本。在后台运行作业时要当心：需要用户交互的命令不要放在后台执行，因为这样你的机器就会在那里傻等。不过，作业在后台运行一样会将结果输出到屏幕上，干扰你的工作。如果放在后台运行的作业会产生大量的输出，最好使用下面的方法把它的输出重定向到某个文件中：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">command</span>  &gt;  out.file  2&gt;&amp;1  &amp;   <span class="comment">#所有的标准输出和错误输出都将被重定向到一个叫做out.file 的文件中。</span></span><br></pre></td></tr></table></figure></li><li><p>2&gt;&amp;1解析<br>&emsp;&emsp;2&gt;&amp;1 是将标准出错重定向到标准输出，这里的标准输出已经重定向到了out.file文件，即将标准出错也输出到out.file文件中。最后一个&amp;， 是让该命令在后台执行。<br>&emsp;&emsp;试想2&gt;1代表什么，2与&gt;结合代表错误重定向，而1则代表错误重定向到一个文件1，而不代表标准输出；换成2&gt;&amp;1，&amp;与1结合就代表标准输出了，就变成错误重定向到标准输出.</p></li><li><p>nohup<br>&emsp;&emsp;使用&amp;命令后，作业被提交到后台运行，当前控制台没有被占用，但是一但把当前控制台关掉(退出帐户时)，作业就会停止运行。nohup命令可以在你退出帐户之后继续运行相应的进程。nohup就是不挂起的意思( no hang up)。该命令的一般形式为：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nohup <span class="built_in">command</span> &amp;  <span class="comment">#在缺省情况下该作业的所有输出都被重定向到一个名为nohup.out的文件中，除非另外指定了输出文件：</span></span><br><span class="line">nohup <span class="built_in">command</span> &gt; myout.file 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure></li><li><p>ctrl + z<br>&emsp;&emsp;可以将一个正在前台执行的命令放到后台，并且处于暂停状态。</p></li><li>jobs<br>&emsp;&emsp;查看当前有多少在后台运行的命令。  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">jobs</span> -l <span class="comment">#可显示所有任务的PID，jobs的状态可以是running, stopped, Terminated。但是如果任务被终止了（kill），shell 从当前的shell环境已知的列表中删除任务的进程标识。</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="硬件信息查看"><a href="#硬件信息查看" class="headerlink" title="硬件信息查看"></a>硬件信息查看</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cat /proc/cpuinfo |grep <span class="string">"physical id"</span>|sort|uniq|wc -l    <span class="comment">#查看物理cpu个数</span></span><br><span class="line">cat /proc/cpuinfo |grep <span class="string">"cpu cores"</span>|wc -l       <span class="comment">#查看每个物理cpu中的core个数</span></span><br><span class="line">cat /proc/cpuinfo |grep <span class="string">"processor"</span>|wc -l       <span class="comment">#逻辑cpu的个数</span></span><br></pre></td></tr></table></figure><h4 id="性能信息查看"><a href="#性能信息查看" class="headerlink" title="性能信息查看"></a>性能信息查看</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">top         <span class="comment">#性能监控程序</span></span><br><span class="line">free -m     <span class="comment">#查看内存使用情况</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> command </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>lombok使用方法记录</title>
      <link href="/2018/08/28/lombok/"/>
      <url>/2018/08/28/lombok/</url>
      <content type="html"><![CDATA[<h4 id="maven引入jar包"><a href="#maven引入jar包" class="headerlink" title="maven引入jar包"></a>maven引入jar包</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.16.20<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="给IDE安装插件"><a href="#给IDE安装插件" class="headerlink" title="给IDE安装插件"></a>给IDE安装插件</h4><p>&emsp;&emsp;由于 Lombok 采取的注解形式的，在编译后，自动生成相应的方法，为了不让 IDE’疯了’，需要下载插件了支持它.<br>&emsp;&emsp;以 idea 为例：查找插件 lombok plugin 安装即可。</p><h4 id="一般注解"><a href="#一般注解" class="headerlink" title="一般注解"></a>一般注解</h4><table><thead><tr><th>注解代码</th><th>用法</th></tr></thead><tbody><tr><td>@Getter</td><td>get方法</td></tr><tr><td>@Setter</td><td>set方法</td></tr><tr><td>@ToString</td><td>ToString方法</td></tr><tr><td>@EqualsAndHashCode</td><td>equals方法和hashcode方法</td></tr><tr><td>@AllArgsConstructor</td><td>会生成一个包含所有变量，同时如果变量使用了NotNull annotation ， 会进行是否为空的校验，全部参数的构造函数的自动生成，该注解的作用域也是只有在实体类上，参数的顺序与属性定义的顺序一致。</td></tr><tr><td>@NoArgsConstructor</td><td>无参构造函数</td></tr><tr><td>@RequiredArgsConstructor</td><td>会生成一个包含常量（final），和标识了@NotNull的变量 的构造方法</td></tr><tr><td>@NonNull</td><td>非空检查,可以帮助我们避免空指针</td></tr></tbody></table><h4 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h4><ol><li>使用staticName启用静态工厂模式，如下所示：@RequiredArgsConstructor(staticName=”of”)。与普通构造函数不同，这种静态工厂方法将推断泛型。这意味着您的API用户可以写入MapEntry.of(“foo”, 5)而不是使用new MapEntry&lt;String, Integer&gt;(“foo”, 5)。</li><li><p>在构造方法上添加注解。使用方法  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequiredArgsConstructor</span>(onConstructor=@__(&#123;<span class="meta">@AnnotationsGoHere</span>&#125;))&#125;</span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span>(onConstructor=@__(&#123;<span class="meta">@Autowired</span>&#125;))&#125;  <span class="comment">//例子</span></span><br></pre></td></tr></table></figure></li><li><p>使用access标识构造器访问权限修饰符，默认为lombok.AccessLevel.PUBLIC。如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AllArgsConstructor</span>(access = lombok.AccessLevel.PROTECTED)</span><br></pre></td></tr></table></figure></li><li><p>@NoArgsConstructor(force = true)会初始化所有字段为0或者false或者null，初始化所有的参数为默认值</p></li></ol><h4 id="val-var"><a href="#val-var" class="headerlink" title="@val @var"></a>@val @var</h4><p>自动类型推断，简单来说，就是弱类型<br>val注解变量申明是final类型 var注解变量是非final类型</p><h4 id="Data"><a href="#Data" class="headerlink" title="@Data"></a>@Data</h4><p>&emsp;&emsp;自动为所有字段添加@ToString, @EqualsAndHashCode, @Getter方法，为非final字段添加@Setter,和@RequiredArgsConstructor<br>&emsp;&emsp;<font color="red">注意的是</font>，同时使用@Data 和 @AllArgsConstructor后 ，默认的无参构造函数<font color="red">失效</font>，如果需要它，要重新设置 @NoArgsConstructor</p><h4 id="Accessors-chain-true"><a href="#Accessors-chain-true" class="headerlink" title="@Accessors(chain = true)"></a>@Accessors(chain = true)</h4><p>开启链式风格<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Accessors</span>(chain = <span class="keyword">true</span>)</span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Student student = <span class="keyword">new</span> Student()</span><br><span class="line">        .setAge(<span class="number">24</span>)</span><br><span class="line">        .setName(<span class="string">"zs"</span>);</span><br></pre></td></tr></table></figure></p><h4 id="Slf4j"><a href="#Slf4j" class="headerlink" title="@Slf4j"></a>@Slf4j</h4><p>直接调用log<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">log.info(xxxx);</span><br></pre></td></tr></table></figure></p><h4 id="Log"><a href="#Log" class="headerlink" title="@Log"></a>@Log</h4><p>使用的是 java.util.logging.Logger ，直接使用 变量 log。</p><h4 id="Builder"><a href="#Builder" class="headerlink" title="@Builder"></a>@Builder</h4><p>使用建筑者模式构建对象。</p><h4 id="Cleanup"><a href="#Cleanup" class="headerlink" title="@Cleanup"></a>@Cleanup</h4><p>自动化关闭流，相当于 jdk1.7 种的 try with resource<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Cleanup</span> </span><br><span class="line">InputStream in = <span class="keyword">new</span> FileInputStream(args[<span class="number">0</span>]);</span><br><span class="line"><span class="meta">@Cleanup</span> </span><br><span class="line">OutputStream out = <span class="keyword">new</span> FileOutputStream(args[<span class="number">1</span>]);</span><br></pre></td></tr></table></figure></p><h4 id="SneakyThrows"><a href="#SneakyThrows" class="headerlink" title="@SneakyThrows"></a>@SneakyThrows</h4><p>当我们需要抛出异常，在当前方法上调用，不用显示的在方法名后面写 throw<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SneakyThrows</span>(Exception.class)</span><br></pre></td></tr></table></figure></p><h4 id="Synchronized"><a href="#Synchronized" class="headerlink" title="@Synchronized"></a>@Synchronized</h4><p>方法中所有的代码都加入到一个代码块中，默认静态方法使用的是全局锁，普通方法使用的是对象锁，当然也可以指定锁的对象。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Object lock = <span class="keyword">new</span> Object();</span><br><span class="line"><span class="meta">@Synchronized</span>(<span class="string">"lock"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">foo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Do something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>参考内容：<br>&emsp;&emsp;<a href="https://projectlombok.org/features/all?spm=a2c4e.11153940.blogcont59972.9.2aeb6d327c6fbZ" target="_blank" rel="noopener">官方文档</a><br>&emsp;&emsp;<a href="https://www.itcodemonkey.com/article/6309.html" target="_blank" rel="noopener">你真的会写java吗?</a><br>&emsp;&emsp;<a href="https://www.cnblogs.com/qnight/p/8997493.html" target="_blank" rel="noopener">使用Lombok来优雅的编码</a></p>]]></content>
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tools </tag>
            
            <tag> java </tag>
            
            <tag> reconsitution </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>正则表达式应用（持续更新）</title>
      <link href="/2018/08/28/regex-using/"/>
      <url>/2018/08/28/regex-using/</url>
      <content type="html"><![CDATA[<h4 id="编程过程中使用的正则记录"><a href="#编程过程中使用的正则记录" class="headerlink" title="编程过程中使用的正则记录"></a>编程过程中使用的正则记录</h4><ol><li>b<em>[^:b#/]+.</em>$        统计代码行数（不包括以# / 开头的 亦不包括空行）</li><li>\d(9|[0-7])\d{4}     中国邮政编码</li><li>^((13[0-9])|(15[^4,\D])|(18[0,5-9]))\d{8}$     手机号</li><li>^([a-z0-9A-Z]+[-|\.]?)+[a-z0-9A-Z]@([a-z0-9A-Z]+(-[a-z0-9A-Z]+)?\.)+[a-zA-Z]{2,}$      邮箱</li><li>^[\u4e00-\u9fa5]{0,}$    汉字</li><li>http(s)?://([\w-]+\.)+[\w-]+(/[\w- ./?%&amp;=])?  url</li><li>(((\d{1,2})|(1\d{2})|(2[0-4]\d)|(25[0-5])).){3}((\d{1,2})|(1\d{2})|(2[0-4]\d)|(25[0-5])) ipv4</li><li>&lt;!-{2,}.*-{2,}&gt;      html注释</li><li>[1-8]\d{5}((18)|(19)|(20))?\d{2}[0-1]\d[0-3]\d{4}[\dX]?      中华人民共和国身份证号码</li></ol>]]></content>
      
      <categories>
          
          <category> regular </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tools </tag>
            
            <tag> regex </tag>
            
            <tag> regular </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>CCNA学习笔记七 -- IPv6</title>
      <link href="/2018/08/28/ccna-7/"/>
      <url>/2018/08/28/ccna-7/</url>
      <content type="html"><![CDATA[<h4 id="DoD模型"><a href="#DoD模型" class="headerlink" title="DoD模型"></a>DoD模型</h4><p>应用层 Telent、FTP、SMTP、DNS、HTTP以及其他应用协议<br>传输层 TCP、UDP<br>网络层 ND、MLD、ICMPv6、IPv6<br>网络接口 各种通信网络接口（以太网等物理网络）  </p><h4 id="IPv6地址（128位）"><a href="#IPv6地址（128位）" class="headerlink" title="IPv6地址（128位）"></a>IPv6地址（128位）</h4><ol><li>首选的格式<br>128比特分成8段，每段的16比特用16进制表示，中间用:隔开<br>xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx</li><li>压缩格式，允许0压缩<br>xxxx:xxxx::xx:xxx:x:xxxx<br>一对::在一个地址中只能出现1次</li><li>IPv4构造IPv6<br>0:0:0:0:0:0:192.168.0.1或者::192.168.0.1</li><li>子网掩码<br>xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx/n 前n位是网络部分，后边是主机部分<h4 id="单播地址"><a href="#单播地址" class="headerlink" title="单播地址"></a>单播地址</h4>全球路由前缀  |子网|接口ID<br>2001:0db8:3c4d:0012:a:d:1234:56ab<br>链路本地地址 link local address  该地址用于同一网段中IPv6计算机通信<br>多播地址<br>任播地址  </li></ol><p>::  相当于0.0.0.0<br>::1 相当于127.0.0.1<br>2000::/3 全球单播地址范围，前三位是001<br>FE80::/10 链路本地单播地址<br>FF00::/8 组播地址范围<br>3FFF:FFFF::/32 示例和文档保留地址<br>2001:oDB8::/32 示例和文档保留地址<br>2002::/16 用于IPv6到IPv4的转换系统</p><h4 id="IPv6地址分配"><a href="#IPv6地址分配" class="headerlink" title="IPv6地址分配"></a>IPv6地址分配</h4><ol><li>静态</li><li>自动<br>无状态 向路由器发送路由前缀请求，配置IPv6的路由器接口收到，然后发送路由通告，计算机获得网络部分+自己的MAC地址，进行构造IPv6地址<br>有DHCP服务器 路由通告中M=1，则向DHCP服务器请求ip地址；路由通告中O=1，则向DHCP服务器请求其他设置如DNS服务器、搜索后缀等  </li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(config)#ipv6 unicast-routing 启用IPv6</span><br><span class="line">(config)#interface fastEthernet 0/0</span><br><span class="line">(config-if)#ipv6 address 2001:13::1/64</span><br><span class="line"></span><br><span class="line">(config-if)#ipv6 nd managed-config-flag  令路由通告中M=1</span><br><span class="line">(config-if)#ipv6 nd other-config-flag 令路由通告中O=1</span><br></pre></td></tr></table></figure><h4 id="IPv6路由添加"><a href="#IPv6路由添加" class="headerlink" title="IPv6路由添加"></a>IPv6路由添加</h4><h5 id="静态路由"><a href="#静态路由" class="headerlink" title="静态路由"></a>静态路由</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#show ipv6 interface fastEthernet 0/0 </span><br><span class="line">#show ipv6 route 查看IPv6路由表查</span><br><span class="line">(config)#ipv6 route 2001:1::/64 2001:1::1</span><br><span class="line">(config-if)#ipv6 address 2001:1::/64 eui-64 自己根据前缀和自己的MAC地址构造IPv6地址</span><br><span class="line">(config-if)#ipv6 address 2001:1::1/64</span><br></pre></td></tr></table></figure><h5 id="动态路由"><a href="#动态路由" class="headerlink" title="动态路由"></a>动态路由</h5><ol><li><p>RIPng协议</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(config)#ipv6 unicast-routing</span><br><span class="line">(config)#ipv6 router rip 1</span><br><span class="line">(config-rtr)#exit</span><br><span class="line">(config)#interface fastEthernet 0/1</span><br><span class="line">(config-if)#ipv6 rip 1 enable</span><br></pre></td></tr></table></figure></li><li><p>EIGRPv6协议</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(config)#ipv6 unicast-routing</span><br><span class="line">(config)#ipv6 router eigrp 10</span><br><span class="line">(config-rtr)#no shutdown</span><br><span class="line">(config-rtr)#router-id 4.0.0.1</span><br><span class="line">(config-rtr)#exit</span><br><span class="line">(config)#interface fastEthernet 0/1</span><br><span class="line">(config-if)#ipv6 eigrp 10</span><br></pre></td></tr></table></figure></li><li><p>OSPFv3协议</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(config)#ipv6 unicast-routing</span><br><span class="line">(config)#ipv6 router ospf 1</span><br><span class="line">(config-rtr)#router-id 4.0.0.1</span><br><span class="line">(config-rtr)#exit</span><br><span class="line">(config)#interface fastEthernet 0/1</span><br><span class="line">(config-if)#ipv6 ospf 1 area 0</span><br></pre></td></tr></table></figure></li></ol><h4 id="IPv4和IPv6共存技术"><a href="#IPv4和IPv6共存技术" class="headerlink" title="IPv4和IPv6共存技术"></a>IPv4和IPv6共存技术</h4><p>双协议栈</p><ol><li><p>IPv6 to IPv4隧道技术</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">(config)#ipv6 unicast-routing</span><br><span class="line">(config)#interface fastEthernet 0/1</span><br><span class="line">(config-if)#ipv6 address 2001:1::1/64 </span><br><span class="line">(config-if)#exit</span><br><span class="line">(config)#interface tunnel 0 隧道虚拟端口</span><br><span class="line">(config-if)#no shutdown</span><br><span class="line">(config-if)#ipv6 address 2001:2::1/64 给隧道虚拟端口配置IPv6</span><br><span class="line">(config-if)#tunnel source 10.0.0.1  隧道源地址</span><br><span class="line">(config-if)#tunnel destination 10.0.1.2 隧道目标地址</span><br><span class="line">(config-if)#tunnel mode ipv6ip 设置隧道加密模式</span><br><span class="line">(config-if)#exit</span><br></pre></td></tr></table></figure></li><li><p>ISATAP隧道</p><ol><li><p>配置ISATAP路由(该路由与IPv4网络接口为192.168.0.2)</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(config)#interface tunnel 0</span><br><span class="line">(config-if)#ipv6 address 2001:1::/64 eui-64</span><br><span class="line">(config-if)#no ipv6 nd suppress-ra</span><br><span class="line">(config-if)#tunnel source 10.0.0.1</span><br><span class="line">(config-if)#tunnel mode ipv6ip isatap</span><br><span class="line">(config-if)#no shutdown</span><br></pre></td></tr></table></figure></li><li><p>windows下</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;netsh</span><br><span class="line">netsh&gt;interface</span><br><span class="line">netsh interface&gt;ipv6</span><br><span class="line">netsh interface ipv6&gt;isatap</span><br><span class="line">netsh interface ipv6 isatap&gt;set router 192.168.0.2</span><br></pre></td></tr></table></figure></li></ol></li><li><p>静态NAT-PT</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">(config)#interface fastEthernet 0/1</span><br><span class="line">(config-if)#ipv6 nat </span><br><span class="line">(config-if)#exit</span><br><span class="line">(config)#interface serial 1/0</span><br><span class="line">(config-if)#ipv6 nat </span><br><span class="line">(config-if)#exit</span><br><span class="line">(config)#ipv6 nat v6v4 source 10.0.0.2 2001:2::2 </span><br><span class="line">(config)#ipv6 nat v6v4 source 2001:2::4 10.0.0.4</span><br><span class="line">(config)#ipv6 prefix 2001:3::/96</span><br></pre></td></tr></table></figure></li><li><p>动态NAT-PT 只能由IPv6网络主动向IPv4网络发起通信</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">(config)#interface fastEthernet 0/1</span><br><span class="line">(config-if)#ipv6 nat </span><br><span class="line">(config-if)#exit</span><br><span class="line">(config)#interface serial 1/0</span><br><span class="line">(config-if)#ipv6 nat </span><br><span class="line">(config-if)#exit</span><br><span class="line">(config)#ipv6 access-list v4map </span><br><span class="line">(config-ipv6-acl)#permit 2001:2::/64 any </span><br><span class="line">(config-ipv6-acl)#exit</span><br><span class="line">(config)#ipv6 access-list v6map</span><br><span class="line">(config-ipv6-acl)#permit 2001:2::/64 any </span><br><span class="line">(config-ipv6-acl)#exit</span><br><span class="line">(config)#ipv6 nat</span><br><span class="line">(config)#ipv6 nat v6v4 pool v4pool 10.0.2.100 10.0.2.200 prefix-length 24 </span><br><span class="line">(config)#ipv6 nat v6v4 source list v6list pool v4pool </span><br><span class="line">(config)#ipv6 nat prefix 2001::/96 v4-mapped v4map  2001::/96用v4map里的地址替代</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      <categories>
          
          <category> net </category>
          
      </categories>
      
      
        <tags>
            
            <tag> net </tag>
            
            <tag> ccna </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>CCNA学习笔记六 -- NAT</title>
      <link href="/2018/08/28/ccna-6/"/>
      <url>/2018/08/28/ccna-6/</url>
      <content type="html"><![CDATA[<h4 id="地址转换技术"><a href="#地址转换技术" class="headerlink" title="地址转换技术"></a>地址转换技术</h4><ol><li>内网能够主动访问外网，外网不能主动访问内网，相对而言内网更安全一些  </li><li>节省公网ip地址  </li><li>缺点 慢  <h4 id="NAT（网络地址转换）"><a href="#NAT（网络地址转换）" class="headerlink" title="NAT（网络地址转换）"></a>NAT（网络地址转换）</h4>静态NAT 动态NAT  不节省公网地址、一个公网替换一个内网地址<br>PAT（端口地址转换）  节省公网ip、替换源端口和源地址  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#debug ip packet 开启数据包转发显示</span><br></pre></td></tr></table></figure></li></ol><h4 id="路由器上配置PAT"><a href="#路由器上配置PAT" class="headerlink" title="路由器上配置PAT"></a>路由器上配置PAT</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">(config)#access-list 10 permit 10.0.0.0 0.0.0.255 定义内网地址池</span><br><span class="line">(config)#ip nat pool name 131.107.0.1 131.107.0.1 netmask 255.255.255.0定义一个名为name的公网地址池从.0.1到.0.1</span><br><span class="line">(config)#ip nat inside source list 10 pool name overload  10列表绑定到name，overload表示PAT，不加overload表示NAT</span><br><span class="line">(config)#interface serial 0/0</span><br><span class="line">(config-if)#ip nat outside  0/0公网出口</span><br><span class="line">(config-if)#exit</span><br><span class="line">(config)#interface serial 0/1</span><br><span class="line">(config-if)#ip nat inside   0/1内网入口</span><br></pre></td></tr></table></figure><p>端口映射 使公网地址可以访问内网地址<br>路由端口映射<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(config)#ip nat inside source static tcp 10.0.0.6 80 137.107.0.1 80 端口映射</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> net </category>
          
      </categories>
      
      
        <tags>
            
            <tag> net </tag>
            
            <tag> ccna </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>CCNA学习笔记五 -- ACL</title>
      <link href="/2018/08/28/ccna-5/"/>
      <url>/2018/08/28/ccna-5/</url>
      <content type="html"><![CDATA[<h4 id="网络安全"><a href="#网络安全" class="headerlink" title="网络安全"></a>网络安全</h4><p>物理层安全 墙上不用的网线接口，连接交换机的端口关掉<br>数据链路层安全 ADSL拨号账号和密码 MAC地址绑定 交换机连接计算机数量控制 创建VLAN<br>网络层安全 基于源ip地址目标IP地址的控制<br>传输层安全 会话攻击 LAND攻击 syn洪水攻击<br>应用层安全 登录密码  </p><h4 id="网络层安全"><a href="#网络层安全" class="headerlink" title="网络层安全"></a>网络层安全</h4><p>标准的ACL  基于源地址进行控制<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#config terminal  </span><br><span class="line">(config)#access-list 10 deny host 192.168.1.2</span><br><span class="line">(config)#access-list 10 permit 192.168.1.0 0.0.0.255 允许192.168.1.0访问，使用翻转子网掩码</span><br><span class="line">(config)(config)#interface serial 3/0</span><br><span class="line">(config-if)#ip access-group 10 in/out 绑定控制列表到物理接口并确定出还是进检查访问列表</span><br><span class="line">(config)#no access-list 10 删除ACL10</span><br><span class="line">ACL的顺序影响访问控制</span><br><span class="line">扩展的ACL  基于源地址、目标地址、协议、端口号进行控制</span><br><span class="line">(config)#access-list 100 permit ip 192.168.1.0 0.0.0.255 any 允许192.168.1.0/24访问任何</span><br><span class="line">(config)#access-list 100 permit tcp 192.18.2.0 0.0.0.255 10.0.0.0 0.0.0.255 eq 80 允许192.18.2.0/24访问10.0.0.0/8上的web服务器</span><br><span class="line">(config)#access-list 100 permit icmp 192.18.2.0 0.0.0.255 any 允许192.18.2.0/24ping任何因特网</span><br></pre></td></tr></table></figure></p><p>将acl绑定到telnet接口<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(config-line)#access-class 10 in/out</span><br></pre></td></tr></table></figure></p><h4 id="acl具体应用"><a href="#acl具体应用" class="headerlink" title="acl具体应用"></a>acl具体应用</h4><ol><li><p>入站————决不允许任何源地址是内部主机地址或网络地址的数据包进入一个私有的网络</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#access-list 150 deny ip 127.0.0.0 0.255.255.255 any log</span><br><span class="line">#access-list 150 deny ip 0.0.0.0 255.255.255.255 any log</span><br><span class="line">#access-list 150 deny ip 10.0.0.0 0.255.255.255 any log</span><br><span class="line">#access-list 150 deny ip 127.16.0.0 0.15.255.255 any log</span><br><span class="line">#access-list 150 deny ip 192.168.0.0 0.0.255.255 any log</span><br><span class="line">#access-list 150 deny ip 224.0.0.0 15.255.255.255 any log</span><br><span class="line">#access-list 150 deny ip host 255.255.255.255 any log</span><br><span class="line">#access-list 150 permit ip any any</span><br></pre></td></tr></table></figure></li><li><p>出站————决不允许任何含有非内部网络有效的ip数据包出站</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#access-list 150 permit 192.168.0.0 0.0.255.255 any</span><br><span class="line">#access-list 150 deny ip any any log</span><br></pre></td></tr></table></figure></li><li><p>阻塞外部访问</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#access-list 109 permit any 192.268.0.0 0.0.255.255 established </span><br><span class="line">#access-list 109 deny ip any any log</span><br></pre></td></tr></table></figure></li><li><p>过滤ICMP消息————禁止ping命令进内网</p><pre><code>#access-list 112 deny icmp any any echo log #access-list 112 deny icmp any any redirect log #access-list 112 deny icmp any any mask-request log#access-list 112 permit icmp any 192.168.0.0 0.0.255.255  </code></pre></li></ol>]]></content>
      
      <categories>
          
          <category> net </category>
          
      </categories>
      
      
        <tags>
            
            <tag> net </tag>
            
            <tag> ccna </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>CCNA学习笔记四 -- VLAN</title>
      <link href="/2018/08/28/ccna-4/"/>
      <url>/2018/08/28/ccna-4/</url>
      <content type="html"><![CDATA[<h4 id="VLAN虚拟局域网"><a href="#VLAN虚拟局域网" class="headerlink" title="VLAN虚拟局域网"></a>VLAN虚拟局域网</h4><p>&emsp;&emsp;VLAN是交换机组网才有的概念，按部门或管理的要求来组网，而不是按照位置组网，更灵活，安全<br>一个VLAN=一个广播域=一个网段<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#show vlan 查看VLAN</span><br><span class="line">(config)#vlan 2 创建VLAN2</span><br><span class="line">(config)#interrface range fastEthernet 0/13 - 24 选中13-24接口</span><br><span class="line">(config-if-range)#switchport mode access 设置计算机接口</span><br><span class="line">(config-if-range)#switchport access vlan 2 设置为vlan2</span><br></pre></td></tr></table></figure></p><h6 id="单臂路由器实现VLAN间路由"><a href="#单臂路由器实现VLAN间路由" class="headerlink" title="单臂路由器实现VLAN间路由"></a>单臂路由器实现VLAN间路由</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(config)#interface gigabitEthernet 1/1 打开Gbit1/1接口</span><br><span class="line">(config-if)#switchport mode trunk 设置干道链路</span><br></pre></td></tr></table></figure><h6 id="三层交换机上的配置"><a href="#三层交换机上的配置" class="headerlink" title="三层交换机上的配置"></a>三层交换机上的配置</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">(config)#ip routing 启用路由功能</span><br><span class="line">(config-if)#switchport trunk encapsulation dotlq设置trunk封装格式为dotlq</span><br><span class="line">(config-if)#switchport mode trunk</span><br><span class="line">(config)#Interface vlan 1</span><br><span class="line">(config-if)#ip address ip_address mask </span><br><span class="line">(config-if)# no shutdown </span><br><span class="line">(config)#interface vlan 2</span><br><span class="line">(config-if)#ip address ip_address mask </span><br><span class="line">(config-if)# no shutdown</span><br></pre></td></tr></table></figure><h4 id="VTP协议"><a href="#VTP协议" class="headerlink" title="VTP协议"></a>VTP协议</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(condig)#vtp domain name   设置vtp域名</span><br><span class="line">(condig)#vtp password passwd  设置vtp密码</span><br><span class="line">(condig)#vtp mode client/server  设置客户端或者服务端，服务端可以更改整个域的VLAN的添加删除，但是不能更改其他的交换机的端口是否属于该vlan</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> net </category>
          
      </categories>
      
      
        <tags>
            
            <tag> net </tag>
            
            <tag> ccna </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>CCNA学习笔记三 -- 路由和交换</title>
      <link href="/2018/08/28/ccna-3/"/>
      <url>/2018/08/28/ccna-3/</url>
      <content type="html"><![CDATA[<h4 id="网络畅通的条件"><a href="#网络畅通的条件" class="headerlink" title="网络畅通的条件"></a>网络畅通的条件</h4><p>数据包能去能回<br>沿途的路由器必须知道到目标地址如何转发<br>沿途的路由器必须知道回来的数据包如何转发  </p><p>路由器直连的网络 不用告诉路由器如何转发<br>路由器没有直连的网络 管理员需要告诉路由器到目标网络如何转发 即添加静态路由<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(config)#ip route 192.168.1.0 255.255.255.0 192.268.2.0  设置数据包 到192.168.1.0/24的数据包下一跳给192.168.2.0</span><br><span class="line">(config)#tracroute ip_address 跟踪数据包路径</span><br><span class="line">#show ip route 查看路由表</span><br><span class="line">(config)#no ip route 192.168.1.0 255.255.255.0 删除路由表</span><br><span class="line">windows上添加路由表 route add ip_adress mask ip_web</span><br><span class="line">windows查看路由表 netstat-r    route print</span><br></pre></td></tr></table></figure></p><h4 id="动态路由"><a href="#动态路由" class="headerlink" title="动态路由"></a>动态路由</h4><p>优先级 直连0 静态路由1 eigp90  rip120<br>RIP协议 跳数判断，周期性（30s）更新路由表，最大跳数16跳<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">(config)#router rip  启用rip协议  </span><br><span class="line">(config-router)#network 192.168.1.0 该网段参与rip协议  </span><br><span class="line">#debug ip rip 显示rip协议信息</span><br><span class="line">#undebug all  关闭rip协议信息显示</span><br><span class="line">#show ip protocols 显示应用协议</span><br><span class="line">EIGP协议 优先级高于RIP</span><br><span class="line">(config)#router eigp 10  启用eigp协议,相同编号路由器才可以交换路由信息</span><br><span class="line">(config-router)#network 192.168.1.0 该网段参与eigp协议</span><br></pre></td></tr></table></figure></p><h4 id="交换"><a href="#交换" class="headerlink" title="交换"></a>交换</h4><p>集线器 不安全、冲突域、带宽共享<br>交换机 基于目标MAC地址转发、学习MAC地址、端口独享带宽、没有冲突、广播会出问题<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#show mac-address-table 显示MAC地址表</span><br><span class="line">  #config terminal </span><br><span class="line">  (config)#interrface fastEthernet 0/4</span><br><span class="line">  (config-if)#switchport mode access 接机算机的接口</span><br><span class="line">  (config-if)#switchport port-security 启用安全</span><br><span class="line">  (config-if)#switchport port-security violation shutdown 违反安全规则down掉</span><br><span class="line">  (config-if)#switchport port-security maxium 2 限制连接数量</span><br><span class="line">  (config)#interrface range fastEthernet 0/1 - 24 选中1-24个口</span><br><span class="line">  (config-if-range)#switchport port-security mac-adddress sticky MAC地址终止学习</span><br></pre></td></tr></table></figure></p><h4 id="生成树协议"><a href="#生成树协议" class="headerlink" title="生成树协议"></a>生成树协议</h4><p> 为了高可用局域网交换机连接有了环路<br>为了阻断网络中的广播有了生成树协议<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#show spanning-tree 查看交换机端口以及生成树状态</span><br><span class="line">(config)#spanning-tree vlan 1 priority 4096更改路由器优先级为4096，值越小优先级越高</span><br><span class="line">(config)#no spanning-tree vlan 1 关闭生成树协议</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> net </category>
          
      </categories>
      
      
        <tags>
            
            <tag> net </tag>
            
            <tag> ccna </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>CCNA学习笔记二 -- TCP/IP协议</title>
      <link href="/2018/08/27/ccna-2/"/>
      <url>/2018/08/27/ccna-2/</url>
      <content type="html"><![CDATA[<h4 id="DoD模型"><a href="#DoD模型" class="headerlink" title="DoD模型"></a>DoD模型</h4><p>应用层 Telent、FTP、SMTP、DNS、HTTP以及其他应用协议<br>传输层 TCP、UDP<br>网络层 IPv4、ARP、RARP、ICMP<br>网络接口 各种通信网络接口（以太网等物理网络）</p><h4 id="传输层协议"><a href="#传输层协议" class="headerlink" title="传输层协议"></a>传输层协议</h4><p>可靠传输 TCP 分段传输 建立会话（消耗系统资源） 丢失重传<br>不可靠传输 UDP 一个数据包就能表达完整 屏幕广播</p><h4 id="应用层协议"><a href="#应用层协议" class="headerlink" title="应用层协议"></a>应用层协议</h4><h5 id="默认端口"><a href="#默认端口" class="headerlink" title="默认端口"></a>默认端口</h5><p>http=TCP+80<br>ftp=TCP+21（接受命令、验证身份等） 20（传输数据）<br>https=TCP+443<br>SMTP=TCP+25（发邮件）<br>POP3=TCP+110（收邮件）<br>RDP=TCP+3389(远程桌面)<br>DNS=UDP+53（DNS解析）<br>IP地址访问Windows共享文件夹=TCP+445<br>计算机名访问windows共享文件夹=TCP+139<br>SQL=TCP+1433（访问数据库）<br>telnet=TCP+23</p><h4 id="服务和端口的关系"><a href="#服务和端口的关系" class="headerlink" title="服务和端口的关系"></a>服务和端口的关系</h4><p>服务侦听端口<br>客户端请求服务 使用目标端口来区分（服务器根据数据包的目标端口来区分客户端）<br>服务停止 侦听的端口关闭<br>查看侦听的端口 netstat -anb|find “content”<br>检测端口  telnet ip 端口</p><h4 id="网络安全"><a href="#网络安全" class="headerlink" title="网络安全"></a>网络安全</h4><p>win2003service tcp/ip筛选不影响出去的流量<br>wf.msc windows高级防火墙</p><h4 id="网络层协议"><a href="#网络层协议" class="headerlink" title="网络层协议"></a>网络层协议</h4><p>IP协议 选择最佳路径的协议（RIP OSPF EIGRP BGP）<br>ICMP协议 测试网络是否畅通<br>ping 估计带宽 查看网络是否畅通 断定远程系统 每过一个路由器TTL-1<br>TTL 128 windows系统<br>TTL 64  linux系统<br>pathping 跟踪路径 计算丢包情况<br>IGMP协议 组播<br>点到点 广播 多播（组播）<br>ARP协议 将计算机的IP地址解析成MAC地址<br>数据跨网段通讯和同一网段通信过程<br>MAC地址决定了下一跳给那个设备<br>IP地址决定最终计算机</p><h4 id="IP地址"><a href="#IP地址" class="headerlink" title="IP地址"></a>IP地址</h4><p>32位二进制组成</p><h5 id="ip地址分类"><a href="#ip地址分类" class="headerlink" title="ip地址分类"></a>ip地址分类</h5><p>  x:network id  y:host id</p><table><thead><tr><th>类别</th><th>功能</th><th>开头</th><th>个头</th><th>缺省子网掩码</th></tr></thead><tbody><tr><td>A</td><td>xyyy</td><td>1-127</td><td>256^3-2</td><td>255.0.0.0</td></tr><tr><td>B</td><td>xxyy</td><td>128-191</td><td>256^2-2</td><td>255.255.0.0</td></tr><tr><td>C</td><td>xxxy</td><td>192-223</td><td>256-2</td><td>255.255.255.0</td></tr><tr><td>D</td><td>组播</td><td>224-239</td></tr><tr><td>E</td><td>研究</td><td>240-255</td></tr></tbody></table><h5 id="保留的私网地址"><a href="#保留的私网地址" class="headerlink" title="保留的私网地址"></a>保留的私网地址</h5><p>A 10.0.0.0<br>B 172.16.0.0-172.31.0.0<br>C 192.168.0.0-192.168.255.0</p><h5 id="本地环回地址"><a href="#本地环回地址" class="headerlink" title="本地环回地址"></a>本地环回地址</h5><p>127.0.0.1  ping通过表示TCP/IP协议安装正常<br>169.254.0.0 DHCP获取网络地址未果的时候得到的地址</p>]]></content>
      
      <categories>
          
          <category> net </category>
          
      </categories>
      
      
        <tags>
            
            <tag> net </tag>
            
            <tag> ccna </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>CCNA学习笔记一 -- 计算机网络详解</title>
      <link href="/2018/08/27/ccna-1/"/>
      <url>/2018/08/27/ccna-1/</url>
      <content type="html"><![CDATA[<h4 id="局域网与广域网"><a href="#局域网与广域网" class="headerlink" title="局域网与广域网"></a>局域网与广域网</h4><ol><li>局域网 自己花钱买设备自己搭配服务器，带宽固定</li><li>广域网 花钱租带宽</li></ol><h4 id="OSI参考模型"><a href="#OSI参考模型" class="headerlink" title="OSI参考模型"></a>OSI参考模型</h4><pre><code>↑7 应用层      能产生网络流量的应用程序↑6 表示层      表示数据，处理数据 加密 压缩 等↑5 会话层      msconfig netstat -nb (显示程序)↑4 传输层      可靠传输 建立会话 流量控制 差错检查 不可靠传输 不建立会话 节省服务器资源↑3 网络层      选择最佳路径↑2 数据链路层  网络设备 如何封装数据帧 设备地址↑1 物理层      规定了电压标准、接口标准</code></pre><p>程序员的工作层  应用层、表示层、会话层<br>网络工程师的工作层  传输层、网络层、数据链路层、物理层<br>网络分层的好处：每一层互不干扰，没有影响；有主于设备标准化</p><h4 id="网络排错和OSI参考模型"><a href="#网络排错和OSI参考模型" class="headerlink" title="网络排错和OSI参考模型"></a>网络排错和OSI参考模型</h4><table><thead><tr><th>网络层</th><th>可能出现的错误</th></tr></thead><tbody><tr><td>物理层</td><td>连接问题</td></tr><tr><td>数据链路层</td><td>MAC地址冲突 ADSL拨号密码错误</td></tr><tr><td>网络层</td><td>计算机网关设置错误、路由器路由表错误</td></tr><tr><td>应用层</td><td>IE代理设置错误</td></tr></tbody></table><h4 id="网络安全和OSI参考模型"><a href="#网络安全和OSI参考模型" class="headerlink" title="网络安全和OSI参考模型"></a>网络安全和OSI参考模型</h4><table><thead><tr><th>网络层</th><th>安全问题</th></tr></thead><tbody><tr><td>物理层安全</td><td></td></tr><tr><td>数据链路层安全</td><td>MAC地址认证 ADSL拨号上网账号密码 划分VLAN</td></tr><tr><td>网络层安全</td><td>路由器ACL</td></tr><tr><td>传输层安全</td><td>计算机端口安全</td></tr><tr><td>应用层安全</td><td>网站安全、操作系统安全</td></tr></tbody></table><h4 id="网络设备"><a href="#网络设备" class="headerlink" title="网络设备"></a>网络设备</h4><ol><li>网线<br>双绞线  4对 8根 100米 10M 100M（实际用了4根） 1000M （实际用了8根）<br>线序 直通线（都按B连） 同类设备用交叉线（一个A 一个B）<br>不同类设备用直通线<br><font color="#12a112">水晶头接法</font><ul><li>RJ45 A 绿白 绿 橙白 蓝 蓝白 橙 棕白 棕</li><li>RJ45 B 橙白 橙 绿白 蓝 蓝白 绿 棕白 棕</li></ul></li><li>网卡 MAC地址（物理地址）不能更改<br>MAC地址由48位二进制组成，前24位代表厂家 后边为厂家自己所设置的序号<br>查看MAC地址的指令（dos下） ipconfig /all</li><li>集线器 HUB 不安全 带宽共享 效率低下 半双工</li><li>网桥 隔绝冲突域</li><li>交换机 基于MAC地址转发数据、带宽独享、全双工、安全、学习MAC地址</li><li>路由器 负责在不同网段转发数据 一般有广域网接口 隔绝广播（MAC地址全1）</li></ol><h4 id="网络设备和OSI参考模型"><a href="#网络设备和OSI参考模型" class="headerlink" title="网络设备和OSI参考模型"></a>网络设备和OSI参考模型</h4><p>集线器 物理层设备<br>交换机 基于MAC地址转发 数据链路层设备<br>路由器 基于IP地址转发 三层设备  </p><h4 id="分层考虑问题"><a href="#分层考虑问题" class="headerlink" title="分层考虑问题"></a>分层考虑问题</h4><p>网络排错方法 替换法</p>]]></content>
      
      <categories>
          
          <category> net </category>
          
      </categories>
      
      
        <tags>
            
            <tag> net </tag>
            
            <tag> ccna </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Regular Expression 正则表达式</title>
      <link href="/2018/08/25/regex/"/>
      <url>/2018/08/25/regex/</url>
      <content type="html"><![CDATA[<p>Regular Expression（正则表达式） 简称Regex<br>在Javascript中<br>    g(global)表示全局  i表示不区分大小写<br>    .可以匹配任何一个单位的字符<br>    []用于定义字符集合 ^取非</p><h4 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h4><table><thead><tr><th>元字符</th><th>解释说明</th></tr></thead><tbody><tr><td>[\b]</td><td>Backspace键（退格)</td></tr><tr><td>\n</td><td>换行符</td></tr><tr><td>\f</td><td>换页符</td></tr><tr><td>\r</td><td>回车符</td></tr><tr><td>\t</td><td>制表符（tab）</td></tr><tr><td>\v</td><td>垂直制表符</td></tr><tr><td>\r\n</td><td>回车+换行 许多操作系统以此为行结束，Unix与Linux以\n作为行结束</td></tr><tr><td>\d</td><td>任何一个数字字符    [0-9]</td></tr><tr><td>\D</td><td>任何一个非数字字符     [^0-9]</td></tr><tr><td>\w</td><td>[a-zA-Z0-9_]</td></tr><tr><td>\W</td><td>[^a-zA-Z0-9_]</td></tr><tr><td>\s</td><td>[\f\n\r\t\v]      任一一个空白字符</td></tr><tr><td>\S</td><td>[^\f\n\r\t\v]   任一一个非空白字符</td></tr><tr><td>\xXX</td><td>XX:表示十六进制数</td></tr><tr><td>\0XX</td><td>XX:表示八进制数</td></tr></tbody></table><h4 id="POSIX字符类-javascript不支持"><a href="#POSIX字符类-javascript不支持" class="headerlink" title="POSIX字符类   javascript不支持"></a>POSIX字符类   javascript不支持</h4><table><thead><tr><th>POSIX字符类</th><th>解释说明</th></tr></thead><tbody><tr><td>[:alnum:]</td><td>[\w^_]</td></tr><tr><td>[:upper:]</td><td>[A-Z]</td></tr><tr><td>[:alpha:]</td><td>[a-zA-Z]</td></tr><tr><td>[:blank:]</td><td>[ \t] 注意：这里包含空格</td></tr><tr><td>[:xdigit:]</td><td>任何一个十六进制数     [a-fA-F0-9]</td></tr><tr><td>[:cntrl:]</td><td>ASCII控制字符   0-31加上127</td></tr><tr><td>[:digit:]</td><td>\d</td></tr><tr><td>[:graph:]</td><td>[:print:]去除空格</td></tr><tr><td>[:lower:]</td><td>[a-z]</td></tr><tr><td>[:print:]</td><td>任何一个可打印字符</td></tr><tr><td>[:punct:]</td><td>既不属于[:alnum:]也不属于[:cntrl:]的字符</td></tr><tr><td>[:space:]</td><td>[\f\r\n\t\v ]  注意：这里包含空格</td></tr></tbody></table><table><thead><tr><th>符号</th><th>解释说明</th></tr></thead><tbody><tr><td>+</td><td>一次或多次重复</td></tr><tr><td>+?</td><td>懒惰型</td></tr><tr><td>*</td><td>零次或多次重复</td></tr><tr><td>*?</td><td>懒惰型</td></tr><tr><td>?</td><td>零次或一次出现</td></tr><tr><td>{n}</td><td>重复n次</td></tr><tr><td>{m,n}</td><td>至少m次，至多n次</td></tr><tr><td>{m,}</td><td>至少出现m次</td></tr><tr><td>{m,}?</td><td>懒惰型</td></tr><tr><td>\b</td><td>一个单词的开头或结尾  b：boundary</td></tr><tr><td>\B</td><td>不匹配一个单词边界</td></tr><tr><td>^</td><td>字符串开头    $ 字符串结尾</td></tr><tr><td>(?m)</td><td>置于开头，用于开启分行匹配模式  multline mode   注意：有的语言不支持</td></tr><tr><td>(xx)</td><td>子表达式，视为独立元素</td></tr></tbody></table><h4 id="回溯引用-backreference"><a href="#回溯引用-backreference" class="headerlink" title="回溯引用 backreference"></a>回溯引用 backreference</h4><p>替换模式下Javascript使用$代替\</p><table><thead><tr><th>符号</th><th>解释说明</th></tr></thead><tbody><tr><td>\1,\2……\n</td><td>第1个表达式，第2个表达式…….第n个表达式</td></tr><tr><td>\0</td><td>代表整个正则表达式</td></tr><tr><td>\E</td><td>结束 \L或\U转换</td></tr><tr><td>\l</td><td>把下一个字符转换为小写</td></tr><tr><td>\L</td><td>把\L到\E之间全部转换为小写</td></tr><tr><td>\u</td><td>把下一个字符转换为大写</td></tr><tr><td>\U</td><td>把\U到\E之间全部转换为大写</td></tr></tbody></table><p>注意：<br>1、  Java、Perl、PHP、.NET 支持向后查找<br>2、  Javascript、ColdFusion 不支持向后查找<br>向前查找：(?=x)   匹配但不消费x，即结果不包括x<br> 例 (?=:)   原字符串 https:     匹配结果 http<br>向后查找：(?&lt;=x) 匹配但不消费x，即结果不包括x<br>    例 (?&lt;=\$)   原字符串 $400     匹配结果 400<br>注意：向前查找可以任意长度（可以使用.+）  向后查找的长度是固定的<br>    (?=)     正向前查找          (?&lt;=)    正向后查找<br>    (?!)       负向前查找          (?&lt;!)         负向后查找  </p><p>Mysql JAVA1.4<font color="red">不支持</font>条件处理<br>(?(backreference)true-regex)<br>(?(backreference)true-regex|false-regex)<br>Backreference满足时，匹配true-regex 否则匹配false-regex  </p>]]></content>
      
      <categories>
          
          <category> regular </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tools </tag>
            
            <tag> code </tag>
            
            <tag> regex </tag>
            
            <tag> regular </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Git命令</title>
      <link href="/2018/08/25/Git/"/>
      <url>/2018/08/25/Git/</url>
      <content type="html"><![CDATA[<h4 id="查看、添加、提交、删除、找回，重置修改文件"><a href="#查看、添加、提交、删除、找回，重置修改文件" class="headerlink" title="查看、添加、提交、删除、找回，重置修改文件"></a>查看、添加、提交、删除、找回，重置修改文件</h4><p>git help <command> # 显示command的help<br>git show # 显示某次提交的内容 git show $id<br>git co – <file> # 抛弃工作区修改<br>git co . # 抛弃工作区修改<br>git add <file> # 将工作文件修改提交到本地暂存区<br>git add . # 将所有修改过的工作文件提交暂存区<br>git rm <file> # 从版本库中删除文件<br>git rm <file> –cached # 从版本库中删除文件，但不删除文件<br>git reset <file> # 从暂存区恢复到工作文件<br>git reset – . # 从暂存区恢复到工作文件<br>git reset –hard # 恢复最近一次提交过的状态，即放弃上次提交后的所有本次修改<br>git ci <file> git ci . git ci -a # 将git add, git rm和git ci等操作都合并在一起做　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　git ci -am “some comments”<br>git ci –amend # 修改最后一次提交记录<br>git revert &lt;$id&gt; # 恢复某次提交的状态，恢复动作本身也创建次提交对象<br>git revert HEAD # 恢复最后一次提交的状态</file></file></file></file></file></file></p><h4 id="查看文件diff"><a href="#查看文件diff" class="headerlink" title="查看文件diff"></a>查看文件diff</h4><p>git diff <file> # 比较当前文件和暂存区文件差异 git diff<br>git diff <id1><id1><id2> # 比较两次提交之间的差异<br>git diff <branch1>..<branch2> # 在两个分支之间比较<br>git diff –staged # 比较暂存区和版本库差异<br>git diff –cached # 比较暂存区和版本库差异<br>git diff –stat # 仅仅比较统计信息</branch2></branch1></id2></id1></id1></file></p><h4 id="查看提交记录"><a href="#查看提交记录" class="headerlink" title="查看提交记录"></a>查看提交记录</h4><p>git log git log <file> # 查看该文件每次提交记录<br>git log -p <file> # 查看每次详细修改内容的diff<br>git log -p -2 # 查看最近两次详细修改内容的diff<br>git log –stat #查看提交统计信息<br>tig    Mac上可以使用tig代替diff和log，brew install tig</file></file></p><h4 id="Git-本地分支管理-查看、切换、创建和删除分支"><a href="#Git-本地分支管理-查看、切换、创建和删除分支" class="headerlink" title="Git 本地分支管理    查看、切换、创建和删除分支"></a>Git 本地分支管理    查看、切换、创建和删除分支</h4><p>git br -r # 查看远程分支<br>git br &lt;new_branch&gt; # 创建新的分支<br>git br -v # 查看各个分支最后提交信息<br>git br –merged # 查看已经被合并到当前分支的分支<br>git br –no-merged # 查看尚未被合并到当前分支的分支<br>git co <branch> # 切换到某个分支<br>git co -b &lt;new_branch&gt; # 创建新的分支，并且切换过去<br>git co -b &lt;new_branch&gt; <branch> # 基于branch创建新的new_branch<br>git co $id # 把某次历史提交记录checkout出来，但无分支信息，切换到其他分支会自动删除<br>git co $id -b &lt;new_branch&gt; # 把某次历史提交记录checkout出来，创建成一个分支<br>git br -d <branch> # 删除某个分支<br>git br -D <branch> # 强制删除某个分支 (未被合并的分支被删除的时候需要强制)</branch></branch></branch></branch></p><h4 id="分支合并和rebase"><a href="#分支合并和rebase" class="headerlink" title="分支合并和rebase"></a>分支合并和rebase</h4><p>git merge <branch> # 将branch分支合并到当前分支<br>git merge origin/master –no-ff # 不要Fast-Foward合并，这样可以生成merge提交<br>git rebase master <branch> # 将master rebase到branch，相当于： git co <branch> &amp;&amp; git rebase master &amp;&amp; git co master &amp;&amp; git merge <branch></branch></branch></branch></branch></p><h4 id="Git补丁管理-方便在多台机器上开发同步时用"><a href="#Git补丁管理-方便在多台机器上开发同步时用" class="headerlink" title="Git补丁管理(方便在多台机器上开发同步时用)"></a>Git补丁管理(方便在多台机器上开发同步时用)</h4><p>git diff &gt; ../sync.patch # 生成补丁<br>git apply ../sync.patch # 打补丁<br>git apply –check ../sync.patch #测试补丁能否成功</p><h4 id="Git暂存管理"><a href="#Git暂存管理" class="headerlink" title="Git暂存管理"></a>Git暂存管理</h4><p>git stash # 暂存<br>git stash list # 列所有stash<br>git stash apply # 恢复暂存的内容<br>git stash drop # 删除暂存区</p><h4 id="Git远程分支管理"><a href="#Git远程分支管理" class="headerlink" title="Git远程分支管理"></a>Git远程分支管理</h4><p>git pull # 抓取远程仓库所有分支更新并合并到本地<br>git pull –no-ff # 抓取远程仓库所有分支更新并合并到本地，不要快进合并<br>git fetch origin # 抓取远程仓库更新<br>git merge origin/master # 将远程主分支合并到本地当前分支<br>git co –track origin/branch # 跟踪某个远程分支创建相应的本地分支<br>git co -b &lt;local_branch&gt; origin/&lt;remote_branch&gt; # 基于远程分支创建本地分支，功能同上<br>git push # push所有分支<br>git push origin master # 将本地主分支推到远程主分支<br>git push -u origin master # 将本地主分支推到远程(如无远程主分支则创建，用于初始化远程仓库)<br>git push origin &lt;local_branch&gt; # 创建远程分支， origin是远程仓库名<br>git push origin &lt;local_branch&gt;:&lt;remote_branch&gt; # 创建远程分支<br>git push origin :&lt;remote_branch&gt; #先删除本地分支(git br -d <branch>)，然后再push删除远程分支</branch></p><h4 id="Git远程仓库管理"><a href="#Git远程仓库管理" class="headerlink" title="Git远程仓库管理"></a>Git远程仓库管理</h4><p>GitHub<br>git remote -v # 查看远程服务器地址和仓库名称<br>git remote show origin # 查看远程服务器仓库状态<br>git remote add origin git@ github:robbin/robbin_site.git # 添加远程仓库地址<br>git remote set-url origin git@ github.com:robbin/robbin_site.git # 设置远程仓库地址(用于修改远程仓库地址) git remote rm <repository> # 删除远程仓库</repository></p><h4 id="创建远程仓库"><a href="#创建远程仓库" class="headerlink" title="创建远程仓库"></a>创建远程仓库</h4><p>git clone –bare robbin_site robbin_site.git # 用带版本的项目创建纯版本仓库<br>scp -r my_project.git git@ git.csdn.net:~ # 将纯仓库上传到服务器上<br>mkdir robbin_site.git &amp;&amp; cd robbin_site.git &amp;&amp; git –bare init # 在服务器创建纯仓库<br>git remote add origin git@ github.com:robbin/robbin_site.git # 设置远程仓库地址<br>git push -u origin master # 客户端首次提交<br>git push -u origin develop # 首次将本地develop分支提交到远程develop分支，并且track<br>git remote set-head origin master # 设置远程仓库的HEAD指向master分支 ，也可以命令设置跟踪远程库和本地库<br>git branch –set-upstream master origin/master<br>git branch –set-upstream develop origin/develop</p><h4 id="reflog"><a href="#reflog" class="headerlink" title="reflog"></a>reflog</h4><p>git reflog是对reflog进行管理的命令,reflog是git用来记录引用变化的一种机制,比如记录分支的变化或者是HEAD引用的变化.<br>当git reflog不指定引用的时候,默认列出HEAD的reflog.<br>HEAD@{0}代表HEAD当前的值,HEAD@{3}代表HEAD在3次变化之前的值.<br>git会将变化记录到HEAD对应的reflog文件中,其路径为.git/logs/HEAD, 分支的reflog文件都放在.git/logs/refs目录下的子目录中.</p><h4 id="特殊符号"><a href="#特殊符号" class="headerlink" title="特殊符号:"></a>特殊符号:</h4><p>^代表父提交,当一个提交有多个父提交时,可以通过在^后面跟上一个数字,表示第几个父提交: ^相当于^1.<br>~<n>相当于连续的<n>个^.</n></n></p>]]></content>
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> tools </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>nginx的使用（一）-- 简单的安装使用</title>
      <link href="/2018/08/25/nginx-1/"/>
      <url>/2018/08/25/nginx-1/</url>
      <content type="html"><![CDATA[<h2 id="一、nginx简介"><a href="#一、nginx简介" class="headerlink" title="一、nginx简介"></a>一、nginx简介</h2><h4 id="1、nginx是什么"><a href="#1、nginx是什么" class="headerlink" title="1、nginx是什么"></a>1、nginx是什么</h4><p>Nginx (engine x) 是一个高性能的HTTP和反向代理服务，也是一个IMAP/POP3/SMTP服务。其特点是占有内存少，并发能力强，事实上nginx的并发能力确实在同类型的网页服务器中表现较好。</p><h4 id="2、nginx可以用来做什么（不加载第三方模块）"><a href="#2、nginx可以用来做什么（不加载第三方模块）" class="headerlink" title="2、nginx可以用来做什么（不加载第三方模块）"></a>2、nginx可以用来做什么（不加载第三方模块）</h4><ol><li>反向代理</li><li>负载均衡</li><li>HTTP服务器（包含动静分离）</li><li>正向代理</li><li>缓存</li></ol><h2 id="二、nginx安装以及简单的配置"><a href="#二、nginx安装以及简单的配置" class="headerlink" title="二、nginx安装以及简单的配置"></a>二、nginx安装以及简单的配置</h2><h4 id="1、安装nginx（环境-centos7）"><a href="#1、安装nginx（环境-centos7）" class="headerlink" title="1、安装nginx（环境 centos7）"></a>1、安装nginx（环境 centos7）</h4><p>采取最简单的方法，yum install nginx -y</p><h4 id="2、配置nginx"><a href="#2、配置nginx" class="headerlink" title="2、配置nginx"></a>2、配置nginx</h4><p>① 修改user为root（你用来启动nginx的账户）<br>② 添加转发服务器<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">upstream web_server&#123; # 名字随便起</span><br><span class="line">   server 127.0.0.1:8080  max_fails=1  fail_timeout=10s;  #Tomcat服务器1 ip</span><br><span class="line">   server 127.0.0.2:8080  max_fails=1  fail_timeout=10s;  #Tomcat服务器2 ip</span><br><span class="line">   #注意服务器的ip以及端口不要重复</span><br><span class="line">   ...</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">    listen       80 default_server;</span><br><span class="line">    listen       [::]:80 default_server;</span><br><span class="line">    server_name  _;</span><br><span class="line">    root         /usr/share/nginx/html;</span><br><span class="line">    # Load configuration <span class="keyword">files</span> <span class="keyword">for</span> the default server block.</span><br><span class="line">    include /etc/nginx/default.d/*.conf;</span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass  http://web_server;   #和上边定义的upstream 对应起来</span><br><span class="line">        proxy_connect_timeout 10;</span><br><span class="line">        proxy_read_timeout  10;</span><br><span class="line">        proxy_send_timeout  10;</span><br><span class="line">    &#125;</span><br><span class="line">    error_page 404 /404.html;</span><br><span class="line">        location = /<span class="number">40</span><span class="keyword">x</span>.html &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    error_page 500 502 503 504 /50x.html;</span><br><span class="line">        location = /<span class="number">50</span><span class="keyword">x</span>.html &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="3、nginx的启动、停止、重启"><a href="#3、nginx的启动、停止、重启" class="headerlink" title="3、nginx的启动、停止、重启"></a>3、nginx的启动、停止、重启</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">systemctl start nginx <span class="comment">#启动nginx</span></span><br><span class="line">systemctl stop nginx <span class="comment">#停止nginx</span></span><br><span class="line">systemctl restart nginx <span class="comment">#重新启动nginx</span></span><br><span class="line">systemctl <span class="built_in">enable</span> nginx <span class="comment">#开机启动nginx</span></span><br></pre></td></tr></table></figure><h4 id="4、nginx踩过的一些坑"><a href="#4、nginx踩过的一些坑" class="headerlink" title="4、nginx踩过的一些坑"></a>4、nginx踩过的一些坑</h4><p>selinux引起的权限访问受限问题，cat /var/log/Audit/Audit.log 发现有nginx访问阻止记录<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">type</span>=AVC msg=audit(1416406823.013:3137): avc:  denied  &#123; search &#125; <span class="keyword">for</span>  pid=15488 comm=<span class="string">"nginx"</span> name=<span class="string">"www"</span> dev=<span class="string">"dm-3"</span> ino=146 scontext=system_u:system_r:httpd_t:s0 tcontext=unconfined_u:object_r:user_home_dir_t:s0 tclass=dir</span><br></pre></td></tr></table></figure></p><p>解决方案1、（<font color="red">建议采用</font>）<br>设置selinux允许nginx<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum install policycoreutils-python</span><br><span class="line">cat /var/<span class="built_in">log</span>/audit/audit.log | grep nginx | grep denied | audit2allow -M mynginx</span><br><span class="line">semodule -i mynginx.pp</span><br></pre></td></tr></table></figure></p><p>解决方案2.1、<br>临时关闭selinux<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setenforce 0  <span class="comment">#重启后失效</span></span><br></pre></td></tr></table></figure></p><p>解决方案2.2、<br>永久关闭selinux</p><p>打开 selinux 配置文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/selinux/config</span><br></pre></td></tr></table></figure></p><p>修改 selinux 配置文件<br>将SELINUX=enforcing改为SELINUX=disabled，保存后退出<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># This file controls the state of SELinux on the system.</span></span><br><span class="line"><span class="comment"># SELINUX= can take one of these three values:</span></span><br><span class="line"><span class="comment">#     enforcing - SELinux security policy is enforced.</span></span><br><span class="line"><span class="comment">#     permissive - SELinux prints warnings instead of enforcing.</span></span><br><span class="line"><span class="comment">#     disabled - No SELinux policy is loaded.</span></span><br><span class="line">SELINUX=enforcing</span><br><span class="line"><span class="comment"># SELINUXTYPE= can take one of three two values:</span></span><br><span class="line"><span class="comment">#     targeted - Targeted processes are protected,</span></span><br><span class="line"><span class="comment">#     minimum - Modification of targeted policy. Only selected processes are protected.</span></span><br><span class="line"><span class="comment">#     mls - Multi Level Security protection.</span></span><br><span class="line">SELINUXTYPE=targeted</span><br></pre></td></tr></table></figure></p><p>重启电脑（<font color="red">一定重启</font>，否则无效）</p>]]></content>
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>测试</title>
      <link href="/2018/08/25/first/"/>
      <url>/2018/08/25/first/</url>
      <content type="html"><![CDATA[<h2 id="测试文章"><a href="#测试文章" class="headerlink" title="测试文章"></a>测试文章</h2><ul><li>博客开通了</li><li>有事情请发送邮件</li></ul>]]></content>
      
      <categories>
          
          <category> test </category>
          
      </categories>
      
      
        <tags>
            
            <tag> test </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
